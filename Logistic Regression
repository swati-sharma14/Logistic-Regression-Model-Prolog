# -*- coding: utf-8 -*-
"""Q3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17nfa_5T0TFnttyj7D3VqNxQ4cwT21uLw
"""

#importing the required libraries
import numpy as nm  
import matplotlib.pyplot as mtp  
import pandas as pd   
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import mean_squared_error
from sklearn.metrics import confusion_matrix

#uploading the files
from google.colab import files
files.upload()

info= pd.read_csv("Q3_diabetes_dataset (1).csv")
info

#scaling 
updated=(info-info.min())/(info.max()-info.min())
updated

diabetic= updated[updated["Outcome"]==1]["Pregnancies"].tolist()
nondiabetic= updated[updated["Outcome"]==0]["Pregnancies"].tolist()
mtp.scatter(diabetic,[diabetic.count(i) for i in diabetic], color="red")
mtp.scatter(nondiabetic,[nondiabetic.count(i) for i in nondiabetic], color="cyan")
mtp.xlabel("Number of pregnancies")
mtp.ylabel("Frequency")

diabetic= updated[updated["Outcome"]==1]["Glucose"].tolist()
nondiabetic= updated[updated["Outcome"]==0]["Glucose"].tolist()
mtp.scatter(diabetic,[diabetic.count(i) for i in diabetic], color="red")
mtp.scatter(nondiabetic,[nondiabetic.count(i) for i in nondiabetic], color="cyan")
mtp.xlabel("Glucose Count")
mtp.ylabel("Frequency")

diabetic= updated[updated["Outcome"]==1]["BloodPressure"].tolist()
nondiabetic= updated[updated["Outcome"]==0]["BloodPressure"].tolist()
mtp.scatter(diabetic,[diabetic.count(i) for i in diabetic], color="red")
mtp.scatter(nondiabetic,[nondiabetic.count(i) for i in nondiabetic], color="cyan")
mtp.xlabel("Blood Pressure")
mtp.ylabel("Frequency")

diabetic= updated[updated["Outcome"]==1]["SkinThickness"].tolist()
nondiabetic= updated[updated["Outcome"]==0]["SkinThickness"].tolist()
mtp.scatter(diabetic,[diabetic.count(i) for i in diabetic], color="red")
mtp.scatter(nondiabetic,[nondiabetic.count(i) for i in nondiabetic], color="cyan")
mtp.xlabel("Skin Thickness")
mtp.ylabel("Frequency")

diabetic= updated[updated["Outcome"]==1]["Insulin"].tolist()
nondiabetic= updated[updated["Outcome"]==0]["Insulin"].tolist()
mtp.scatter(diabetic,[diabetic.count(i) for i in diabetic], color="red")
mtp.scatter(nondiabetic,[nondiabetic.count(i) for i in nondiabetic], color="cyan")
mtp.xlabel("Insulin Count")
mtp.ylabel("Frequency")

diabetic= updated[updated["Outcome"]==1]["BMI"].tolist()
nondiabetic= updated[updated["Outcome"]==0]["BMI"].tolist()
mtp.scatter(diabetic,[diabetic.count(i) for i in diabetic], color="red")
mtp.scatter(nondiabetic,[nondiabetic.count(i) for i in nondiabetic], color="cyan")
mtp.xlabel("Body Mass Index")
mtp.ylabel("Frequency")

diabetic= updated[updated["Outcome"]==1]["Insulin"].tolist()
nondiabetic= updated[updated["Outcome"]==0]["Insulin"].tolist()
mtp.scatter(diabetic,[diabetic.count(i) for i in diabetic], color="red")
mtp.scatter(nondiabetic,[nondiabetic.count(i) for i in nondiabetic], color="cyan")
mtp.xlabel("Insulin Count")
mtp.ylabel("Frequency")

diabetic= updated[updated["Outcome"]==1]["Age"].tolist()
nondiabetic= updated[updated["Outcome"]==0]["Age"].tolist()
mtp.scatter(diabetic,[diabetic.count(i) for i in diabetic], color="red")
mtp.scatter(nondiabetic,[nondiabetic.count(i) for i in nondiabetic], color="cyan")
mtp.xlabel("Age")
mtp.ylabel("Frequency")

trueoutput= updated["Outcome"]
giveninputs= updated.drop(["Outcome"], axis=1)
input_train, input_test, output_train, output_test = train_test_split(giveninputs, trueoutput, test_size=0.20, random_state=42)

ourmodel= LogisticRegression()
ourmodel.fit(input_train , output_train)
predicted = ourmodel.predict(input_test)
predicted

#calculating the root mean squared error
rmse= mean_squared_error(output_test, predicted)
accuracy = ourmodel.score(input_test, output_test)
print("root means square error: ", rmse)
print("Accuracy:",accuracy*100)

confusion_matrix(output_test,predicted)
